import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchAllProducts, fetchBrands, fetchCategories, fetchProductsByFilter, fetchProductsById, fetchProductsBySort } from "../product-list/productApi"
const initialState = {
  value:1,
  products : [],
  brands : [],
  categories : [],
  selectedProducts : null,
  status: 'some',
  error: ""
};

export const fetchAllProductsAsync = createAsyncThunk(
  'products/fetchAllProducts',
  async () => {
    try {
      const response = await fetchAllProducts();
      return response.data;
    } catch (error) {
      throw error;
    }
  }
);
export const fetchCategoriesAsync = createAsyncThunk(
  'products/fetchCategories',
  async () => {
    try {
      const response = await fetchCategories();
      return response.data;
    } catch (error) {
      throw error;
    }
  }
);
export const fetchBrandsAsync = createAsyncThunk(
  'products/fetchBrands',
  async () => {
    try {
      const response = await fetchBrands();

      return response.data;
    } catch (error) {
      throw error;
    }
  }
);
export const fetchAProductsByFilterAsync = createAsyncThunk(
  'products/fetchProductsByFilter',
  async (filter) => {
    try {
      const response = await fetchProductsByFilter(filter);
      return response.data;
    } catch (error) {
      throw error;
    }
  }
);
export const fetchAProductByIdAsync = createAsyncThunk(
  'products/fetchProductById',
  async (id) => {
    try {
      const response = await fetchProductsById(id);
      return response.data;
    } catch (error) {
      throw error;
    }
  }
);


export const productSlice = createSlice({
  name: 'products',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      state.value += 1;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchAllProductsAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchAllProductsAsync.rejected, (state) => {
        state.status = 'failed';
      })
      .addCase(fetchAllProductsAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.products = action.payload;
      })
      .addCase(fetchAProductsByFilterAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.products = action.payload;
      })
      .addCase(fetchAProductsByFilterAsync.pending, (state) => {
        state.status = 'pending';
      })
      .addCase(fetchBrandsAsync.pending, (state) => {
        state.status = 'pending';
      })
      .addCase(fetchBrandsAsync.fulfilled, (state,action) => {
        state.status = 'idle';
        state.brands = action.payload
      })
      .addCase(fetchCategoriesAsync.fulfilled, (state,action) => {
        state.status = 'idle';
        state.categories = action.payload
      })
      .addCase(fetchCategoriesAsync.pending, (state) => {
        state.status = 'pending';
      })
      .addCase(fetchAProductByIdAsync.pending, (state) => {
        state.status = 'pending';
      })
      .addCase(fetchAProductByIdAsync.fulfilled, (state,action) => {
        state.status = 'idle';
        state.selectedProducts = action.payload
      })
      
      
  },
});

export const { increment } = productSlice.actions;

export const selectProducts = (state) => state.products
export const selectBrands = (state) => state.products
export const selectCategories = (state) => state.products
export const selectProductById = (state) => state.products.selectedProducts;

export default productSlice.reducer;
