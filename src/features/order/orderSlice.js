import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { AddOrder } from './orderApi';

const initialState = {
  value: 0,
  status: 'idle',
  order:[],
  currentOrder : null
};
export const AddorderAsync = createAsyncThunk(
  'order/addOrder',
  async (order) => {
    const response = await AddOrder(order);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const counterSlice = createSlice({
  name: 'order',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      state.value += 1;
    },
    resetOrder: (state) => {
      state.currentOrder = null
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(AddorderAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(AddorderAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.order.push(action.payload);
        state.currentOrder = action.payload
      });
  },
});

export const { resetOrder } = counterSlice.actions;

export const currentOrder = (state) => state.order.currentOrder;

export default counterSlice.reducer;
