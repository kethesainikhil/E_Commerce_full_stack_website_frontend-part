import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { AddAdress, AddUser, Logout, checkUser } from './authApi';

const initialState = {
  loggedIn: null,
  status: 'idle',
  error:null,
  address:[]
};
export const AddUserAsync = createAsyncThunk(
  'users/AddUser',
  async (userData) => {
    const response = await AddUser(userData);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);
export const LogoutUserAsync = createAsyncThunk(
  'users/logOutUser',
  async (id) => {
    const response = await Logout(id);
    // The value we return becomes the `fulfilled` action payload
    console.log(response)
    return response.data;
  }
);
export const addAddressAsync = createAsyncThunk(
  'users/addAddress',
  async (update) => {
    const response = await AddAdress(update);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);
export const checkUserAsync = createAsyncThunk(
  'users/checkUser',
  async (logInfo) => {
    console.log(logInfo)
    const response = await checkUser(logInfo);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const counterSlice = createSlice({
  name: 'user',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      state.value += 1;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(AddUserAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(AddUserAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.loggedIn = action.payload;
      })
      .addCase(checkUserAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(checkUserAsync.fulfilled, (state, action) => {
        state.loggedIn = action.payload;
      })
      .addCase(checkUserAsync.rejected, (state, action) => {
        state.status = 'reject';
        state.error = action.error;
      })
      .addCase(addAddressAsync.fulfilled, (state, action) => {
        state.loggedIn = action.payload
      })
      .addCase(addAddressAsync.rejected, (state, action) => {
        state.status = 'reject';
        state.error = action.error;
      })
      .addCase(LogoutUserAsync.fulfilled, (state, action) => {
        state.loggedIn = null
      })
      .addCase(LogoutUserAsync.pending, (state) => {
        state.status = 'loading';
      })
  },
});

export const { increment } = counterSlice.actions;

// export const selectCount = (state) => state.counter.value;
export const loggedInUser = (state) => state.user?.loggedIn
export const errorUser = (state) => state.user?.error
export const updateAddress = (state) => state.user?.address


export default counterSlice.reducer;
