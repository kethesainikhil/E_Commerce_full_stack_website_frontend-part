import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { AddToCart, deleteItemCart, fetchItemsById, resetItems, updateCart } from './cartApi';

const initialState = {
  value: 0,
  items: [],
};
export const addToCartAsync = createAsyncThunk(
  'cart/addItem',
  async (item) => {
    const response = await AddToCart(item);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);
export const updateToCartAsync = createAsyncThunk(
  'cart/updateItem',
  async (update) => {
    const response = await updateCart(update);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);
export const deleteToCartAsync = createAsyncThunk(
  'cart/deleteItem',
  async (id) => {
    const response = await deleteItemCart(id);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);
export const fetchItemsByUserIdAsync = createAsyncThunk(
  'cart/allItem',
  async (id) => {
    const response = await fetchItemsById(id);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);
export const resetItemsAsync = createAsyncThunk(
  'cart/resetItem',
  async (id) => {
    const response = await resetItems(id);
    // The value we return becomes the `fulfilled` action payload
    console.log(response.data)
    console.log("resposne")
    return response.data;
  }
);

export const counterSlice = createSlice({
  name: 'cart',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      state.value += 1;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(addToCartAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(addToCartAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.items.push(action.payload);
      })
      .addCase(fetchItemsByUserIdAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchItemsByUserIdAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.items = action.payload;
      })
      .addCase(updateToCartAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(updateToCartAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        const index = state.items.findIndex(item => item.id === action.payload.id)
        state.items[index] = action.payload;
      })
      .addCase(deleteToCartAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(deleteToCartAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        const index = state.items.findIndex(item => item.id === action.payload)
        state.items.splice(index,1)
      })
      .addCase(resetItemsAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(resetItemsAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.items = [];
      })
  },
});

export const { increment } = counterSlice.actions;

export const fetchItems = (state) => state.cart.items;

export default counterSlice.reducer;
